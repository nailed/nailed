/*
 * Nailed, a Minecraft PvP server framework
 * Copyright (C) jk-5 <http://github.com/jk-5/>
 * Copyright (C) Nailed team and contributors <http://github.com/nailed/>
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the MIT License.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the MIT License along with
 * this program. If not, see <http://opensource.org/licenses/MIT/>.
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            //Because SpecialSource 1.7 is still beta
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "sonatype public"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
        maven {
            //MinecraftForge repo for Srg2Source
            name = "forge"
            url = "http://files.minecraftforge.net/maven/"
        }
        maven {
            name = "jk-5"
            url = "http://maven.jk-5.nl"
        }
    }
    dependencies {
        classpath "jk_5.nailed.mcp:mcp:1.6.3"
    }
}

repositories {
    mavenLocal()
    maven {
        name "sk89q"
        url "http://maven.sk89q.com/repo/"
    }
    maven {
        name "jk-5"
        url "http://maven.jk-5.nl"
    }
    maven {
        name "sponge"
        url "http://repo.spongepowered.org/maven/"
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "maven"
apply plugin: "nailed-mcp"

group = "jk_5.nailed"
version = "1.1.1-SNAPSHOT"

ext.reobfSrg = new File(project.buildDir, "tmp/mappings/generated/srg/mcp2srg.srg")
ext.mixinSrg = new File(project.buildDir, "tmp/mixins/mixins.srg")
ext.mixinRefMap = new File(project.buildDir, "tmp/mixins/mixins.nailed.refmap.json")

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

nailedMCP {
    minecraftVersion = "1.8"
    mainClass = "net.minecraft.server.MinecraftServer"
    mappings = "snapshot_nodoc_20150227"
}

configurations {
    deployer //Jars needed for maven deployer
    worldedit //Deploy configuration for worldedit
    shadeWorldedit //Libraries shaded into the worldedit jar
    shaded //Libraries shaded into the main jar
    compile.extendsFrom shaded
    compile.extendsFrom shadeWorldedit

    compile.exclude module: 'lwjgl'
    compile.exclude module: 'lwjgl-platform'
    compile.exclude module: 'jinput'
    compile.exclude module: 'jinput-platform'
    compile.exclude module: 'jutils'

    shaded.exclude module: 'lwjgl'
    shaded.exclude module: 'lwjgl-platform'
    shaded.exclude module: 'jinput'
    shaded.exclude module: 'jinput-platform'
    shaded.exclude module: 'jutils'
}

dependencies {
    compile 'net.minecraft:launchwrapper:1.11'
    shaded 'org.ow2.asm:asm-debug-all:5.0.3'
    shaded 'jk_5.eventbus:EventBus:2.0.1'
    shaded 'lzma:lzma:0.0.1'
    shaded 'com.nothome:javaxdelta:2.0.1'
    shaded 'org.mozilla:rhino:1.7R4'
    shaded 'org.jdom:jdom2:2.0.5'
    shaded 'com.typesafe:config:1.2.1'
    shaded 'org.apache.logging.log4j:log4j-slf4j-impl:2.0-beta9'
    shaded 'org.javassist:javassist:3.18.2-GA'
    shaded 'org.spongepowered:mixin:0.2-SNAPSHOT'

    shadeWorldedit "com.sk89q:worldedit:6.0.0-SNAPSHOT"

    shaded project(':api')

    testCompile 'junit:junit:4.12-beta-1'

    deployer 'org.apache.maven.wagon:wagon-ssh:2.6'
}

task nailedJar(type: Jar) {
    classifier = ''

    from {
        configurations.shaded.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                exclude "META-INF", "META-INF/**", "*META-INF*", "meta-inf"
                exclude "**.jar", "**/*.jar", "*.jar"
            }
        }
    }

    manifest {
        attributes "Main-Class": "jk_5.nailed.launch.ServerMain"
        attributes "Built-By": System.getProperty("user.name")
        attributes "Build-Jdk": System.getProperty("java.version")
        attributes "Created-By": "Gradle " + gradle.gradleVersion
        attributes "Implementation-Version": project.version
        attributes "Implementation-Title": "jk_5.nailed"
        attributes "Implementation-Vendor": "jk-5"
        attributes "Specification-Version": project.version
        attributes "Specification-Title": "Nailed server implementation"
        attributes "Specification-Vendor": "jk-5"
        attributes "Class-Path": "bin/minecraft_server.1.8.jar bin/launchwrapper-1.11.jar"
    }

    dependsOn "generateBinaryPatches"
    dependsOn ":api:jar"

    from project.mixinRefMap

    from plugins.getPlugin('nailed-mcp').toDelayedZipFileTree(jk_5.nailed.mcp.Constants.BINPATCHES())
    from plugins.getPlugin('nailed-mcp').toDelayedFileTree(jk_5.nailed.mcp.Constants.NAILED_RESOURCES())

    exclude("jk_5/nailed/plugins/worldedit/**")
}

//Delay evaluation of shadowJar manifest
project.gradle.taskGraph.whenReady { taskGraph ->
    if(taskGraph.hasTask(nailedJar)){
        nailedJar.manifest{
            attributes("Implementation-Version": project(":api").version, "jk_5.nailed.api")
            attributes("Implementation-Title": "jk_5.nailed.api", "jk_5.nailed.api")
            attributes("Implementation-Vendor": "jk-5", "jk_5.nailed.api")
            attributes("Specification-Version": project(":api").version, "jk_5.nailed.api")
            attributes("Specification-Title": "Nailed api", "jk_5.nailed.api")
            attributes("Specification-Vendor": "jk-5", "jk_5.nailed.api")
        }
    }
}

compileJava {
    options.compilerArgs += [
            //'-Xlint:all', //TODO
            '-Xlint:-path',
            '-Xlint:-processing',
            '-Xlint:-unchecked',
            "-AreobfSrgFile=${project.reobfSrg.getCanonicalPath()}",
            "-AoutSrgFile=${project.mixinSrg.getCanonicalPath()}",
            "-AoutRefMapFile=${project.mixinRefMap.getCanonicalPath()}"
    ]
    options.deprecation = true
    options.encoding = 'UTF-8'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.jFlags('-Xms256m', '-Xmx512m')
    source = [
            project("api").sourceSets.main.java,
            sourceSets.main.java
    ]
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

reobfuscate {
    addExtraSrgFile project.mixinSrg
}

task worldEditJar(type: Jar) {
    baseName = "WorldEdit"
    version = "1.0.0"

    manifest {
        attributes "Built-By": System.getProperty("user.name")
        attributes "Build-Jdk": System.getProperty("java.version")
        attributes "Created-By": "Gradle " + gradle.gradleVersion
        attributes "Implementation-Version": "1.0.0"
        attributes "Implementation-Title": "jk_5.nailed.plugins.worldedit"
        attributes "Implementation-Vendor": "jk-5"
        attributes "Specification-Version": "1.0.0"
        attributes "Specification-Title": "WorldEdit plugin for Nailed"
        attributes "Specification-Vendor": "jk-5"
    }

    dependsOn "generateBinaryPatches"
    from zipTree("build/tmp/jars/binpatches.jar")
    from {
        configurations.shadeWorldedit.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                exclude "META-INF", "META-INF/**", "*META-INF*", "meta-inf"
                exclude "**.jar", "**/*.jar", "*.jar"
            }
        }
    }
    include("jk_5/nailed/plugins/worldedit/**")
    include("com/sk89q/**")
    include("com/thoughtworks/paranamer/**")
    include("net/royawesome/jlibnoise/**")
}

artifacts {
    worldedit worldEditJar
    archives nailedJar
}

uploadArchives {
    if (project.hasProperty("deploymaven")) {
        repositories.mavenDeployer {
            configuration = configurations.deployer
            repository(url: project.deploymaven.url) {
                authentication(userName: project.deploymaven.username, password: project.deploymaven.password)
            }
            pom.project {
                description = 'Nailed, the Minecraft PvP server framework'
                url = 'https://github.com/nailed/nailed'

                scm {
                    url 'https://github.com/nailed/nailed'
                    connection 'scm:git:git://github.com/nailed/nailed.git'
                    developerConnection 'scm:git:git@github.com:nailed/nailed.git'
                }

                issueManagement {
                    system 'github'
                    url 'https://github.com/nailed/nailed/issues'
                }

                developers {
                    developer {
                        id = 'jk-5'
                        name = 'jk-5'
                        roles {
                            role 'developer'
                            role 'packager'
                        }
                    }
                    developer {
                        id = 'mattashii'
                        name = 'mattashii'
                        roles {
                            role 'contributor'
                        }
                    }
                }
            }
        }
    }else{
        repositories{
            mavenLocal()
        }
    }
}

uploadWorldedit {
    if (project.hasProperty("deploymaven")) {
        repositories.mavenDeployer {
            configuration = configurations.deployer
            repository(url: project.deploymaven.url) {
                authentication(userName: project.deploymaven.username, password: project.deploymaven.password)
            }
            pom.groupId = "jk_5.nailed.plugins"
            pom.artifactId = "WorldEdit"
            pom.version = "1.0.0"
            pom.project {
                description = 'WorldEdit plugin for nailed'
                url = 'https://github.com/nailed/nailed'

                scm {
                    url 'https://github.com/nailed/nailed'
                    connection 'scm:git:git://github.com/nailed/nailed.git'
                    developerConnection 'scm:git:git@github.com:nailed/nailed.git'
                }

                issueManagement {
                    system 'github'
                    url 'https://github.com/nailed/nailed/issues'
                }

                developers {
                    developer {
                        id = 'jk-5'
                        name = 'jk-5'
                        roles {
                            role 'developer'
                            role 'packager'
                        }
                    }
                    developer {
                        id = 'mattashii'
                        name = 'mattashii'
                        roles {
                            role 'contributor'
                        }
                    }
                }
            }
        }
    }else{
        repositories{
            mavenLocal()
        }
    }
}
